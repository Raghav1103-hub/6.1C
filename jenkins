pipeline {
    agent any

    environment {
        RECIPIENT_EMAIL = 'singlaraghav158@gmail.com'
        MAVEN_HOME = tool name: 'Maven 3.x', type: 'maven'
    }

    stages {
        stage('Build') {
            steps {
                echo 'Stage 1: Build Process'
                echo 'Details: The code is being built using Maven for compilation and packaging.'
                sh "${MAVEN_HOME}/bin/mvn clean package"
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                echo 'Stage 2: Unit and Integration Testing'
                echo 'Details: Running unit tests using JUnit 5.'
                sh "${MAVEN_HOME}/bin/mvn test"
            }
            post {
                success {
                    emailext(
                        attachLog: true,
                        to: RECIPIENT_EMAIL,
                        subject: 'Unit and Integration Tests: Success',
                        body: 'Stage 2 has successfully passed. Please refer to the attached logs for more information.'
                    )
                }
                failure {
                    emailext(
                        attachLog: true,
                        to: RECIPIENT_EMAIL,
                        subject: 'Unit and Integration Tests: Failure',
                        body: 'Stage 2 failed. Please check the attached logs for further details.'
                    )
                }
            }
        }

        stage('Code Analysis') {
            steps {
                echo 'Stage 3: Code Quality Analysis'
                echo 'Details: Running SonarQube for static code analysis.'
                // Assuming SonarQube is already configured in Jenkins
                withSonarQubeEnv('SonarQube') {
                    sh "${MAVEN_HOME}/bin/mvn sonar:sonar"
                }
            }
        }

        stage('Security Scan') {
            steps {
                echo 'Stage 4: Security Vulnerability Scan'
                echo 'Details: Scanning for vulnerabilities using OWASP Dependency-Check.'
                sh "${MAVEN_HOME}/bin/mvn org.owasp:dependency-check-maven:check"
            }
            post {
                success {
                    emailext (
                        attachLog: true,
                        to: RECIPIENT_EMAIL,
                        subject: 'Security Scan: Success',
                        body: 'Stage 4 completed successfully. Logs are attached for reference.'
                    )
                }
                failure {
                    emailext(
                        attachLog: true,
                        to: RECIPIENT_EMAIL,
                        subject: 'Security Scan: Failed',
                        body: 'Stage 4 encountered a failure. Logs are attached for review.'
                    )
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                echo 'Stage 5: Deployment to Staging'
                echo 'Details: Deploying the application to the staging environment on an AWS EC2 instance.'
                // Add deployment script or command for staging deployment
                sh 'deploy_to_staging.sh'
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                echo 'Stage 6: Integration Testing in Staging'
                echo 'Details: Running integration tests in the staging environment.'
                // Add commands for running tests in the staging environment
                sh 'run_staging_tests.sh'
            }
        }

        stage('Deploy to Production') {
            steps {
                echo 'Stage 7: Deployment to Production'
                echo 'Details: Deploying the application to the production environment on AWS EC2.'
                // Add deployment script or command for production deployment
                sh 'deploy_to_production.sh'
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
        }
    }
}
