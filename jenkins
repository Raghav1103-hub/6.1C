pipeline {
    agent any

    environment {
        RECIPIENT_EMAIL = 'singlaraghav158@gmail.com'
        MAVEN_HOME = tool name: 'Maven 3.x', type: 'maven'
    }

    stages {
        stage('Build') {
            steps {
                echo 'Phase 1: Initiating Build Process'
                echo 'Description: Compiling and packaging the application using Maven.'
                sh "${MAVEN_HOME}/bin/mvn clean package"
            }
        }

        stage('Unit and Integration Testing') {
            steps {
                echo 'Phase 2: Running Unit and Integration Tests'
                echo 'Description: Executing JUnit 5-based unit tests and integration tests to ensure all components function as expected.'
                sh "${MAVEN_HOME}/bin/mvn test"
            }
            post {
                success {
                    emailext(
                        attachLog: true,
                        to: RECIPIENT_EMAIL,
                        subject: 'Unit and Integration Tests: Success',
                        body: 'Phase 2 passed successfully. Please review the attached logs for further details.'
                    )
                }
                failure {
                    emailext(
                        attachLog: true,
                        to: RECIPIENT_EMAIL,
                        subject: 'Unit and Integration Tests: Failure',
                        body: 'Phase 2 encountered failures. Review the attached logs for details.'
                    )
                }
            }
        }

        stage('Static Code Analysis') {
            steps {
                echo 'Phase 3: Performing Code Quality Assessment'
                echo 'Description: Running static code analysis using SonarQube to ensure the code meets best practices and standards.'
                withSonarQubeEnv('SonarQube') {
                    sh "${MAVEN_HOME}/bin/mvn sonar:sonar"
                }
            }
        }

        stage('Security Vulnerability Scanning') {
            steps {
                echo 'Phase 4: Scanning for Security Vulnerabilities'
                echo 'Description: Conducting a security scan using OWASP Dependency-Check to identify any vulnerabilities.'
                sh "${MAVEN_HOME}/bin/mvn org.owasp:dependency-check-maven:check"
            }
            post {
                success {
                    emailext(
                        attachLog: true,
                        to: RECIPIENT_EMAIL,
                        subject: 'Security Scan: Success',
                        body: 'Phase 4 completed successfully. Logs are attached for your reference.'
                    )
                }
                failure {
                    emailext(
                        attachLog: true,
                        to: RECIPIENT_EMAIL,
                        subject: 'Security Scan: Failure',
                        body: 'Phase 4 failed. Please check the attached logs for more information.'
                    )
                }
            }
        }

        stage('Staging Environment Deployment') {
            steps {
                echo 'Phase 5: Deploying to Staging Environment'
                echo 'Description: Deploying the application to a staging environment, simulating production on AWS EC2.'
                // Placeholder for the actual staging deployment script
                sh 'deploy_to_staging.sh'
            }
        }

        stage('Integration Testing in Staging') {
            steps {
                echo 'Phase 6: Running Integration Tests in Staging'
                echo 'Description: Performing integration tests within the staging environment to verify the applicationâ€™s behavior in a production-like setting.'
                // Placeholder for the actual integration testing script in staging
                sh 'run_staging_tests.sh'
            }
        }

        stage('Production Deployment') {
            steps {
                echo 'Phase 7: Deploying to Production Environment'
                echo 'Description: Deploying the finalized application to the production environment on AWS EC2.'
                // Placeholder for the actual production deployment script
                sh 'deploy_to_production.sh'
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
    }
}
